{
    "docs": [
        {
            "location": "/", 
            "text": "User Guide\n\ue157\n\n\nGeneral Use\n\ue157\n\n\n\n\nQuickCal can be run from the command palette to show the current month, or navigate through future or past months.  QuickCal can be even be configured to show holidays. If you have Sublime Text build 3080+, QuickCal can also show holiday tooltips that outline all of the holidays for the selected day (in version of Sublime 3124+, tooltip appears on hover instead).\n\n\nCommands\n\ue157\n\n\nCalendar can be opened via commands from the command palette.  Once a calendar is shown, you can use the left and right arrow to navigate the months of the year.\n\n\nCalendarCommand\n\ue157\n\n\nShows today's date in the calendar (month view only)\n\n\nCalendarLookupCommand\n\ue157\n\n\nShows an input panel allowing the user to define what day they would like to see in the calendar.  Input is entered as \nmonth/day/year\n, where month, day, and year are numerical values.  Any non number delimiter can be used, so things like \n3-2-2013\n is also acceptable.\n\n\nCalendarMonthNavCommand\n\ue157\n\n\nCalendarMonthNavCommand\n is a command that can only be run in a calendar view.  It allows you to navigate to the next or previous month.  It takes a directional option called \nreverse\n.  If \nreverse\n is set to \ntrue\n, the command will navigate to the previous month.\n\n\nSettings\n\ue157\n\n\nThese are the available settings at the current time:\n\n\nlocale\n\ue157\n\n\nWhen in online mode, holidays are downloaded from holidata.net.  Holidata.net provides holidays for a number of different locales.  You can see which are available by checking \nhere\n.  Simply enter your locale in the \nlocale\n setting to retrieve the appropriate locale.  Holidays from holidata.net are limited to about one year in advance of the current and go back as far as 2011.\n\n\n{\n\n    \n// Locale for holidays, this is what will get pulled down from holidata.net\n\n    \n// Please check http://holidata.net/locale_index.html to see available locale\n\n    \nlocale\n:\n \nen-US\n,\n\n\n\n\n\nregion\n\ue157\n\n\nSome locales will have sub regions that have different holidays.  For instance, the United States has many states, and some states have holidays that are specific to a state.  To view what regions are available for your locale, you can look in one of the JSON files located \nhere\n.  If you do not want region specific holidays, you can leave this blank.\n\n\n    \n// Sub region of locale.  For example, in the US, a sub region would be a state\n\n    \n// such as Florida (FL).  If you have doubts about what to use, you can look in\n\n    \n// one of the JSON files at http://holidata.net/locale_index.html to see what\n\n    \n// regions are referenced in you locale file.\n\n    \nregion\n:\n \n,\n\n\n\n\n\nsunday_first\n\ue157\n\n\nIf you would like to view your calendar starting with Sunday as the first day, you can enable \nsunday_first\n.  Simply disable it to have Monday as the first day.\n\n\n    \n// Start with Sunday first when displaying calendar\n\n    \nsunday_first\n:\n \ntrue\n,\n\n\n\n\n\nhide_holiday_footer\n\ue157\n\n\nHides the holiday list that appears under the calendar.\n\n\n    \n// Hide the holiday list under the calendar.\n\n    \nhide_holiday_footer\n:\n \nfalse\n,\n\n\n\n\n\nhighlight_special_interest_days\n\ue157\n\n\nCreates highlight regions around holidays and special interest days (like current day).  This is useful if your color scheme does not natively highlight the calendar scopes.\n\n\n    \n// If your theme does not support coloring the calendar boxes,\n\n    \n// this will highlight the day numbers.\n\n    \nhighlight_special_interest_days\n:\n \ntrue\n,\n\n\n\n\n\nholiday_scope\n\ue157\n\n\nHighlight holidays with the same color as the given scope.\n\n\n    \n// Highlight holidays with the same color as the given scope.\n\n    \nholiday_scope\n:\n \nconstant.numeric\n,\n\n\n\n\n\nselected_scope\n\ue157\n\n\nHighlight selected day (current day etc.) with the same color as the given scope.\n\n\n    \n// Highlight selected day (current day etc.) with the same color as the given scope.\n\n    \nselected_scope\n:\n \nkeyword.operator\n,\n\n\n\n\n\noffline_holidays\n\ue157\n\n\nIf you are behind a firewall or simply prefer the selection provided by the internal holiday generator, you can enable \noffline_holidays\n.  With \noffline_holidays\n, holidays will be generated via an internal library.  Currently, the internal generator contains lists that are mainly for the US, as the author is from the US.  Holiday lists for other countries and cultures are welcome via pull requests!  The internal generator was provided thanks to \nkauinoa\n.\n\n\n    \n// Don\nt download from http://holidata.net, but instead use internal holiday generator.\n\n    \n// Note: currently only US and a few world wide holidays are supported.\n\n    \noffline_holidays\n:\n \nfalse\n,\n\n\n\n\n\ndefault_holiday_lists\n\ue157\n\n\nThe internal, offline holiday generator has a number of holiday lists available.  each item in the dictionary can be individually enabled or disabled.  Enable a list will enable all the holidays specified in that list.\n\n\n    \n// Default internal holiday lists\n\n    \ndefault_holiday_lists\n:\n \n{\n\n        \nchristian\n:\n \nfalse\n,\n          \n// Christian (a lot are specifically Catholic)\n\n        \ndaylight_savings\n:\n \ntrue\n,\n    \n// Daylight Savings\n\n        \ncommon_us\n:\n \nfalse\n,\n          \n// Common US holidays\n\n        \nfederal_us\n:\n \ntrue\n,\n          \n// US federal holidays\n\n        \nimportant_us\n:\n \ntrue\n,\n        \n// Important US holidays\n\n        \nstate_birthdays_us\n:\n \nfalse\n,\n \n// State birthdays US holidays\n\n        \nother_us\n:\n \nfalse\n,\n           \n// Other random holidays\n\n        \nworld_wide\n:\n \nfalse\n          \n// World wide holidays\n\n    \n},\n\n\n\n\n\ncustom_holidays\n\ue157\n\n\nQuickCal allows for additional custom holidays.  You can add as many as you want.  Only very basic holidays can be defined at this time.  Holidays are defined by creating a dictionary object in the \ncustom_holidays\n list.  Holidays are defined in the dictionary by giving the month and the day in an array via the \ndate\n key, and a unique name via the \nname\n key.  Custom holidays \ncannot\n handle complex holidays: 3\nrd\n Tuesday of the month etc.  It is possible that more advanced holiday support might be provided in the future.\n\n\n    \n// Add simple custom holidays.  Should be an array of dictionaries.\n\n    \ncustom_holidays\n:\n \n[\n\n        \n// Should be in the following form:\n\n        \n//    name: is a unique name for the holiday\n\n        \n//    date: is an array of two integers: [month, day]\n\n        \n// {\nname\n: \nBob\ns Birthday\n, \ndate\n: [2, 20]}\n\n    \n]\n\n\n}\n\n\n\n\n\nHighlighting Current Days and Holidays\n\ue157\n\n\nBy default, most color schemes won't highlight the current day and holidays.  For this reason, the \nhighlight_special_interest_days\n settings was added to ensure special interest days still get highlighted.  If you would like to take control of the active day and holiday highlighting and have your color scheme natively highlight these days, you can edit your color scheme.  Active day calendar boxes are scoped as \nselected_day.calendar\n while holiday calendar boxes are scoped as \nholiday.calendar\n.  You must update your color scheme file with something like the following to have your color scheme highlight special interest days (don't forget to disable \nhighlight_special_interest_days\n):\n\n\n        \ndict\n\n            \nkey\nname\n/key\n\n            \nstring\nCalendar Selected Day\n/string\n\n            \nkey\nscope\n/key\n\n            \nstring\nselected_day.calendar\n/string\n\n            \nkey\nsettings\n/key\n\n            \ndict\n\n                \nkey\nbackground\n/key\n\n                \nstring\n#F2777A\n/string\n\n                \nkey\nforeground\n/key\n\n                \nstring\n#2D2D2D\n/string\n\n            \n/dict\n\n        \n/dict\n\n        \ndict\n\n            \nkey\nname\n/key\n\n            \nstring\nCalendar Holiday\n/string\n\n            \nkey\nscope\n/key\n\n            \nstring\nholiday.calendar\n/string\n\n            \nkey\nsettings\n/key\n\n            \ndict\n\n                \nkey\nbackground\n/key\n\n                \nstring\n#66CCCC\n/string\n\n                \nkey\nforeground\n/key\n\n                \nstring\n#2D2D2D\n/string\n\n            \n/dict\n\n        \n/dict", 
            "title": "User Guide"
        }, 
        {
            "location": "/#user-guide", 
            "text": "", 
            "title": "User Guide"
        }, 
        {
            "location": "/#general-use", 
            "text": "QuickCal can be run from the command palette to show the current month, or navigate through future or past months.  QuickCal can be even be configured to show holidays. If you have Sublime Text build 3080+, QuickCal can also show holiday tooltips that outline all of the holidays for the selected day (in version of Sublime 3124+, tooltip appears on hover instead).", 
            "title": "General Use"
        }, 
        {
            "location": "/#commands", 
            "text": "Calendar can be opened via commands from the command palette.  Once a calendar is shown, you can use the left and right arrow to navigate the months of the year.", 
            "title": "Commands"
        }, 
        {
            "location": "/#calendarcommand", 
            "text": "Shows today's date in the calendar (month view only)", 
            "title": "CalendarCommand"
        }, 
        {
            "location": "/#calendarlookupcommand", 
            "text": "Shows an input panel allowing the user to define what day they would like to see in the calendar.  Input is entered as  month/day/year , where month, day, and year are numerical values.  Any non number delimiter can be used, so things like  3-2-2013  is also acceptable.", 
            "title": "CalendarLookupCommand"
        }, 
        {
            "location": "/#calendarmonthnavcommand", 
            "text": "CalendarMonthNavCommand  is a command that can only be run in a calendar view.  It allows you to navigate to the next or previous month.  It takes a directional option called  reverse .  If  reverse  is set to  true , the command will navigate to the previous month.", 
            "title": "CalendarMonthNavCommand"
        }, 
        {
            "location": "/#settings", 
            "text": "These are the available settings at the current time:", 
            "title": "Settings"
        }, 
        {
            "location": "/#locale", 
            "text": "When in online mode, holidays are downloaded from holidata.net.  Holidata.net provides holidays for a number of different locales.  You can see which are available by checking  here .  Simply enter your locale in the  locale  setting to retrieve the appropriate locale.  Holidays from holidata.net are limited to about one year in advance of the current and go back as far as 2011.  { \n     // Locale for holidays, this is what will get pulled down from holidata.net \n     // Please check http://holidata.net/locale_index.html to see available locale \n     locale :   en-US ,", 
            "title": "locale"
        }, 
        {
            "location": "/#region", 
            "text": "Some locales will have sub regions that have different holidays.  For instance, the United States has many states, and some states have holidays that are specific to a state.  To view what regions are available for your locale, you can look in one of the JSON files located  here .  If you do not want region specific holidays, you can leave this blank.       // Sub region of locale.  For example, in the US, a sub region would be a state \n     // such as Florida (FL).  If you have doubts about what to use, you can look in \n     // one of the JSON files at http://holidata.net/locale_index.html to see what \n     // regions are referenced in you locale file. \n     region :   ,", 
            "title": "region"
        }, 
        {
            "location": "/#sunday_first", 
            "text": "If you would like to view your calendar starting with Sunday as the first day, you can enable  sunday_first .  Simply disable it to have Monday as the first day.       // Start with Sunday first when displaying calendar \n     sunday_first :   true ,", 
            "title": "sunday_first"
        }, 
        {
            "location": "/#hide_holiday_footer", 
            "text": "Hides the holiday list that appears under the calendar.       // Hide the holiday list under the calendar. \n     hide_holiday_footer :   false ,", 
            "title": "hide_holiday_footer"
        }, 
        {
            "location": "/#highlight_special_interest_days", 
            "text": "Creates highlight regions around holidays and special interest days (like current day).  This is useful if your color scheme does not natively highlight the calendar scopes.       // If your theme does not support coloring the calendar boxes, \n     // this will highlight the day numbers. \n     highlight_special_interest_days :   true ,", 
            "title": "highlight_special_interest_days"
        }, 
        {
            "location": "/#holiday_scope", 
            "text": "Highlight holidays with the same color as the given scope.       // Highlight holidays with the same color as the given scope. \n     holiday_scope :   constant.numeric ,", 
            "title": "holiday_scope"
        }, 
        {
            "location": "/#selected_scope", 
            "text": "Highlight selected day (current day etc.) with the same color as the given scope.       // Highlight selected day (current day etc.) with the same color as the given scope. \n     selected_scope :   keyword.operator ,", 
            "title": "selected_scope"
        }, 
        {
            "location": "/#offline_holidays", 
            "text": "If you are behind a firewall or simply prefer the selection provided by the internal holiday generator, you can enable  offline_holidays .  With  offline_holidays , holidays will be generated via an internal library.  Currently, the internal generator contains lists that are mainly for the US, as the author is from the US.  Holiday lists for other countries and cultures are welcome via pull requests!  The internal generator was provided thanks to  kauinoa .       // Don t download from http://holidata.net, but instead use internal holiday generator. \n     // Note: currently only US and a few world wide holidays are supported. \n     offline_holidays :   false ,", 
            "title": "offline_holidays"
        }, 
        {
            "location": "/#default_holiday_lists", 
            "text": "The internal, offline holiday generator has a number of holiday lists available.  each item in the dictionary can be individually enabled or disabled.  Enable a list will enable all the holidays specified in that list.       // Default internal holiday lists \n     default_holiday_lists :   { \n         christian :   false ,            // Christian (a lot are specifically Catholic) \n         daylight_savings :   true ,      // Daylight Savings \n         common_us :   false ,            // Common US holidays \n         federal_us :   true ,            // US federal holidays \n         important_us :   true ,          // Important US holidays \n         state_birthdays_us :   false ,   // State birthdays US holidays \n         other_us :   false ,             // Other random holidays \n         world_wide :   false            // World wide holidays \n     },", 
            "title": "default_holiday_lists"
        }, 
        {
            "location": "/#custom_holidays", 
            "text": "QuickCal allows for additional custom holidays.  You can add as many as you want.  Only very basic holidays can be defined at this time.  Holidays are defined by creating a dictionary object in the  custom_holidays  list.  Holidays are defined in the dictionary by giving the month and the day in an array via the  date  key, and a unique name via the  name  key.  Custom holidays  cannot  handle complex holidays: 3 rd  Tuesday of the month etc.  It is possible that more advanced holiday support might be provided in the future.       // Add simple custom holidays.  Should be an array of dictionaries. \n     custom_holidays :   [ \n         // Should be in the following form: \n         //    name: is a unique name for the holiday \n         //    date: is an array of two integers: [month, day] \n         // { name :  Bob s Birthday ,  date : [2, 20]} \n     ]  }", 
            "title": "custom_holidays"
        }, 
        {
            "location": "/#highlighting-current-days-and-holidays", 
            "text": "By default, most color schemes won't highlight the current day and holidays.  For this reason, the  highlight_special_interest_days  settings was added to ensure special interest days still get highlighted.  If you would like to take control of the active day and holiday highlighting and have your color scheme natively highlight these days, you can edit your color scheme.  Active day calendar boxes are scoped as  selected_day.calendar  while holiday calendar boxes are scoped as  holiday.calendar .  You must update your color scheme file with something like the following to have your color scheme highlight special interest days (don't forget to disable  highlight_special_interest_days ):           dict \n             key name /key \n             string Calendar Selected Day /string \n             key scope /key \n             string selected_day.calendar /string \n             key settings /key \n             dict \n                 key background /key \n                 string #F2777A /string \n                 key foreground /key \n                 string #2D2D2D /string \n             /dict \n         /dict \n         dict \n             key name /key \n             string Calendar Holiday /string \n             key scope /key \n             string holiday.calendar /string \n             key settings /key \n             dict \n                 key background /key \n                 string #66CCCC /string \n                 key foreground /key \n                 string #2D2D2D /string \n             /dict \n         /dict", 
            "title": "Highlighting Current Days and Holidays"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\ue157\n\n\nPackage Control\n\ue157\n\n\nThe recommended way to install QuickCal is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nCtrl\n\uff0b\nShift\n\uff0b\nP\n (Win, Linux) or \nCmd\n\uff0b\nShift\n\uff0b\nP\n (macOS) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nQuickCal\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nManual Installation\n\ue157\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install QuickCal for the average user.  Installing this way \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, you should \njust\n clone QuickCal and run Package Control's \nSatisfy Dependency\n command to get all the dependencies.\n\n\n\n\nFor those who want to install QuickCal without package control, here are the steps.  It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.\n\n\n\n\n\n\n\n\nDownload the latest releases of the following dependencies and unpack or git clone in the \nPackages\n folder as shown below:\n\n\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe\n -\n \nmarkupsafe\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2\n -\n \npython-jinja2\n\n\nhttps://github.com/packagecontrol/pygments\n -\n \npygments\n\n\nhttps://github.com/facelessuser/sublime-markdown-popups\n -\n \nmdpopups\n\n\nhttps://github.com/facelessuser/sublime-markdown\n -\n \npython-markdown\n\n\n\n\n\n\n\n\nDownload and unpack, or git clone, the latest QuickCal release and unpack as \nQuickCal\n:\n\n\n\n\nhttps://github.com/facelessuser/QuickCal\n -\n QuickCal\n\n\n\n\n\n\n\n\nCreate a folder under \nPackages\n called \n00-dependencies\n and under that folder create a file called \n00-dependencies.py\n:\n\n\nCopy the following code to \n00-dependencies.py\n (this code was taken from Package Control):\n\n\nimport\n \nsys\n\n\nimport\n \nos\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n\n\n\nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n    \nfrom\n \nctypes\n \nimport\n \nwindll\n,\n \ncreate_unicode_buffer\n\n\n\nimport\n \nsublime\n\n\n\n\nif\n \nsys\n.\nversion_info\n \n=\n \n(\n3\n,):\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \nif\n \nos\n.\npath\n.\nbasename\n(\n__file__\n)\n \n==\n \nsys_path.py\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\ndirname\n(\n__file__\n))\n\n    \n# When loaded as a .sublime-package file, the filename ends up being\n\n    \n# Package Control.sublime-package/Package Control.package_control.sys_path\n\n    \nelse\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\n__file__\n)\n\n    \nst_version\n \n=\n \nu\n3\n\n\n\nelse\n:\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nif\n \nnot\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\ndecode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nif\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\nencode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \npc_package_path\n \n=\n \ndecode\n(\nos\n.\ngetcwd\n())\n\n    \nst_version\n \n=\n \nu\n2\n\n\n\n\nst_dir\n \n=\n \ndirname\n(\ndirname\n(\npc_package_path\n))\n\n\n\n\ndef\n \nadd\n(\npath\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Adds an entry to the beginning of sys.path, working around the fact that\n\n\n    Python 2.6 can\nt import from non-ASCII paths on Windows.\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file to\n\n\n        add to the path\n\n\n\n    :param first:\n\n\n        If the path should be added at the beginning\n\n\n    \n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \n# Work around unicode path import issue on Windows with Python 2.6\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n\n    \nenc_path\n \n=\n \nencode\n(\npath\n)\n\n\n    \nif\n \nos\n.\npath\n.\nexists\n(\nenc_path\n):\n\n        \nif\n \nfirst\n:\n\n            \ntry\n:\n\n                \nsys\n.\npath\n.\nremove\n(\nenc_path\n)\n\n            \nexcept\n \n(\nValueError\n):\n\n                \npass\n\n            \nsys\n.\npath\n.\ninsert\n(\n0\n,\n \nenc_path\n)\n\n        \nelif\n \nenc_path\n \nnot\n \nin\n \nsys\n.\npath\n:\n\n            \nsys\n.\npath\n.\nappend\n(\nenc_path\n)\n\n\n\n\ndef\n \nremove\n(\npath\n):\n\n    \n\n\n    Removes a path from sys.path if it is present\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file\n\n\n    \n\n\n    \ntry\n:\n\n        \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n    \nexcept\n \n(\nValueError\n):\n\n        \npass\n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n        \ntry\n:\n\n            \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n        \nexcept\n \n(\nValueError\n):\n\n            \npass\n\n\n\n\ndef\n \ngenerate_dependency_paths\n(\nname\n):\n\n    \n\n\n    Accepts a dependency name and generates a dict containing the three standard\n\n\n    import paths that are valid for the current machine.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :return:\n\n\n        A dict with the following keys:\n\n\n         - \nver\n\n\n         - \nplat\n\n\n         - \narch\n\n\n    \n\n\n    \npackages_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\nst_dir\n,\n \nu\nPackages\n)\n\n    \ndependency_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\npackages_dir\n,\n \nname\n)\n\n\n    \nver\n \n=\n \nu\nst\n%s\n \n%\n \nst_version\n\n    \nplat\n \n=\n \nsublime\n.\nplatform\n()\n\n    \narch\n \n=\n \nsublime\n.\narch\n()\n\n\n    \nreturn\n \n{\n\n        \nall\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nall\n),\n\n        \nver\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nver\n),\n\n        \nplat\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n)),\n\n        \narch\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n,\n \narch\n))\n\n    \n}\n\n\n\n\ndef\n \nadd_dependency\n(\nname\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Accepts a dependency name and automatically adds the appropriate path\n\n\n    to sys.path, if the dependency has a path for the current platform and\n\n\n    architecture.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :param first:\n\n\n        If the path should be added to the beginning of the list\n\n\n    \n\n\n    \ndep_paths\n \n=\n \ngenerate_dependency_paths\n(\nname\n)\n\n\n    \nfor\n \npath\n \nin\n \ndep_paths\n.\nvalues\n():\n\n        \nif\n \nos\n.\npath\n.\nexists\n(\nencode\n(\npath\n)):\n\n            \nadd\n(\npath\n,\n \nfirst\n=\nfirst\n)\n\n\n\n\nadd_dependency\n(\npygments\n)\n\n\nadd_dependency\n(\nmarkupsafe\n)\n\n\nadd_dependency\n(\npython-markdown\n)\n\n\nadd_dependency\n(\npython-jinja2\n)\n\n\nadd_dependency\n(\nmdpopups\n)\n\n\n\n\n\n\n\n\n\nRestart and enjoy.\n\n\n\n\n\n\nGit Cloning\n\ue157\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal and enter the following.  For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/QuickCal.git QuickCal\n\n\n\n\n\n\n\n\nRestart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install QuickCal is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.     Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  Ctrl \uff0b Shift \uff0b P  (Win, Linux) or  Cmd \uff0b Shift \uff0b P  (macOS) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  QuickCal ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "Warning  This is not the recommended way to install QuickCal for the average user.  Installing this way  will not  get automatically updated.  If you are forking for a pull request, you should  just  clone QuickCal and run Package Control's  Satisfy Dependency  command to get all the dependencies.   For those who want to install QuickCal without package control, here are the steps.  It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.     Download the latest releases of the following dependencies and unpack or git clone in the  Packages  folder as shown below:   https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe  -   markupsafe  https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2  -   python-jinja2  https://github.com/packagecontrol/pygments  -   pygments  https://github.com/facelessuser/sublime-markdown-popups  -   mdpopups  https://github.com/facelessuser/sublime-markdown  -   python-markdown     Download and unpack, or git clone, the latest QuickCal release and unpack as  QuickCal :   https://github.com/facelessuser/QuickCal  -  QuickCal     Create a folder under  Packages  called  00-dependencies  and under that folder create a file called  00-dependencies.py :  Copy the following code to  00-dependencies.py  (this code was taken from Package Control):  import   sys  import   os  from   os.path   import   dirname  if   os . name   ==   nt : \n     from   ctypes   import   windll ,   create_unicode_buffer  import   sublime  if   sys . version_info   =   ( 3 ,): \n     def   decode ( path ): \n         return   path \n\n     def   encode ( path ): \n         return   path \n\n     if   os . path . basename ( __file__ )   ==   sys_path.py : \n         pc_package_path   =   dirname ( dirname ( __file__ )) \n     # When loaded as a .sublime-package file, the filename ends up being \n     # Package Control.sublime-package/Package Control.package_control.sys_path \n     else : \n         pc_package_path   =   dirname ( __file__ ) \n     st_version   =   u 3  else : \n     def   decode ( path ): \n         if   not   isinstance ( path ,   unicode ): \n             path   =   path . decode ( sys . getfilesystemencoding ()) \n         return   path \n\n     def   encode ( path ): \n         if   isinstance ( path ,   unicode ): \n             path   =   path . encode ( sys . getfilesystemencoding ()) \n         return   path \n\n     pc_package_path   =   decode ( os . getcwd ()) \n     st_version   =   u 2  st_dir   =   dirname ( dirname ( pc_package_path ))  def   add ( path ,   first = False ): \n          Adds an entry to the beginning of sys.path, working around the fact that      Python 2.6 can t import from non-ASCII paths on Windows.      :param path:          A unicode string of a folder, zip file or sublime-package file to          add to the path      :param first:          If the path should be added at the beginning       \n\n     if   os . name   ==   nt : \n         # Work around unicode path import issue on Windows with Python 2.6 \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n\n     enc_path   =   encode ( path ) \n\n     if   os . path . exists ( enc_path ): \n         if   first : \n             try : \n                 sys . path . remove ( enc_path ) \n             except   ( ValueError ): \n                 pass \n             sys . path . insert ( 0 ,   enc_path ) \n         elif   enc_path   not   in   sys . path : \n             sys . path . append ( enc_path )  def   remove ( path ): \n          Removes a path from sys.path if it is present      :param path:          A unicode string of a folder, zip file or sublime-package file       \n\n     try : \n         sys . path . remove ( encode ( path )) \n     except   ( ValueError ): \n         pass \n\n     if   os . name   ==   nt : \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n         try : \n             sys . path . remove ( encode ( path )) \n         except   ( ValueError ): \n             pass  def   generate_dependency_paths ( name ): \n          Accepts a dependency name and generates a dict containing the three standard      import paths that are valid for the current machine.      :param name:          A unicode string name of the dependency      :return:          A dict with the following keys:           -  ver           -  plat           -  arch       \n\n     packages_dir   =   os . path . join ( st_dir ,   u Packages ) \n     dependency_dir   =   os . path . join ( packages_dir ,   name ) \n\n     ver   =   u st %s   %   st_version \n     plat   =   sublime . platform () \n     arch   =   sublime . arch () \n\n     return   { \n         all :   os . path . join ( dependency_dir ,   all ), \n         ver :   os . path . join ( dependency_dir ,   ver ), \n         plat :   os . path . join ( dependency_dir ,   u %s _ %s   %   ( ver ,   plat )), \n         arch :   os . path . join ( dependency_dir ,   u %s _ %s _ %s   %   ( ver ,   plat ,   arch )) \n     }  def   add_dependency ( name ,   first = False ): \n          Accepts a dependency name and automatically adds the appropriate path      to sys.path, if the dependency has a path for the current platform and      architecture.      :param name:          A unicode string name of the dependency      :param first:          If the path should be added to the beginning of the list       \n\n     dep_paths   =   generate_dependency_paths ( name ) \n\n     for   path   in   dep_paths . values (): \n         if   os . path . exists ( encode ( path )): \n             add ( path ,   first = first )  add_dependency ( pygments )  add_dependency ( markupsafe )  add_dependency ( python-markdown )  add_dependency ( python-jinja2 )  add_dependency ( mdpopups )     Restart and enjoy.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Quit Sublime Text.    Open a terminal and enter the following.  For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/QuickCal.git QuickCal    Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\ue157\n\n\nOverview\n\ue157\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nProvide environment information by running \nPreferences-\nPackage Settings-\nApplySyntax-\nSupport Info\n.  The information will be copied to the clipboard; paste the info in issue.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\n\n\n\n\nPlease describe the change in as much detail as possible so I can understand what is being added or modified.\n\n\n\n\n\n\nIf you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).\n\n\n\n\n\n\nPlease reference and link related open bugs or feature requests in this pull if applicable.\n\n\n\n\n\n\nMake sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.\n\n\n\n\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nRunning Validation Tests\n\ue157\n\n\n\n\nTip\n\n\nIf you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \npytest\n.  You can install \npytest\n via:\n\n\npip install pytest\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\npy.test .\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n, and \nflak8-putty\n.  These can be installed via:\n\n\npip install flake8\n3\npip install flake8_docstrings\npip install pep8-naming\npip install flake8-putty\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nMkDocs\n, the \nMaterial theme\n, and \nPyMdown Extensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory. You can then view the documents at \nlocalhost:8000\n.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing--support", 
            "text": "", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Provide environment information by running  Preferences- Package Settings- ApplySyntax- Support Info .  The information will be copied to the clipboard; paste the info in issue.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.    Please describe the change in as much detail as possible so I can understand what is being added or modified.    If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).    Please reference and link related open bugs or feature requests in this pull if applicable.    Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.    Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  pytest .  You can install  pytest  via:  pip install pytest  The tests should be run from the root folder of the plugin by using the following command:  py.test .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming , and  flak8-putty .  These can be installed via:  pip install flake8 3\npip install flake8_docstrings\npip install pep8-naming\npip install flake8-putty  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  MkDocs , the  Material theme , and  PyMdown Extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory. You can then view the documents at  localhost:8000 .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\ue157\n\n\nQuickCal is released under the MIT license.\n\n\nCopyright \n 2012 - 2017 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "QuickCal is released under the MIT license.  Copyright   2012 - 2017 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}