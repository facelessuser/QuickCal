{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"User Guide \ue157 General Use \ue157 QuickCal can be run from the command palette to show the current month, or navigate through future or past months. QuickCal can be even be configured to show holidays. If you have Sublime Text build 3080+, QuickCal can also show holiday tooltips that outline all of the holidays for the selected day (in version of Sublime 3124+, tooltip appears on hover instead). Commands \ue157 Calendar can be opened via commands from the command palette. Once a calendar is shown, you can use the left and right arrow to navigate the months of the year. CalendarCommand \ue157 Shows today's date in the calendar (month view only) CalendarLookupCommand \ue157 Shows an input panel allowing the user to define what day they would like to see in the calendar. Input is entered as month/day/year , where month, day, and year are numerical values. Any non number delimiter can be used, so things like 3-2-2013 is also acceptable. CalendarMonthNavCommand \ue157 CalendarMonthNavCommand is a command that can only be run in a calendar view. It allows you to navigate to the next or previous month. It takes a directional option called reverse . If reverse is set to true , the command will navigate to the previous month. Settings \ue157 These are the available settings at the current time: locale \ue157 When in online mode, holidays are downloaded from holidata.net. Holidata.net provides holidays for a number of different locales. You can see which are available by checking here . Simply enter your locale in the locale setting to retrieve the appropriate locale. Holidays from holidata.net are limited to about one year in advance of the current and go back as far as 2011. { // Locale for holidays, this is what will get pulled down from holidata.net // Please check http://holidata.net/locale_index.html to see available locale \"locale\" : \"en-US\" , region \ue157 Some locales will have sub regions that have different holidays. For instance, the United States has many states, and some states have holidays that are specific to a state. To view what regions are available for your locale, you can look in one of the JSON files located here . If you do not want region specific holidays, you can leave this blank. // Sub region of locale. For example, in the US, a sub region would be a state // such as Florida (FL). If you have doubts about what to use, you can look in // one of the JSON files at http://holidata.net/locale_index.html to see what // regions are referenced in you locale file. \"region\" : \"\" , sunday_first \ue157 If you would like to view your calendar starting with Sunday as the first day, you can enable sunday_first . Simply disable it to have Monday as the first day. // Start with Sunday first when displaying calendar \"sunday_first\" : true , hide_holiday_footer \ue157 Hides the holiday list that appears under the calendar. // Hide the holiday list under the calendar. \"hide_holiday_footer\" : false , highlight_special_interest_days \ue157 Creates highlight regions around holidays and special interest days (like current day). This is useful if your color scheme does not natively highlight the calendar scopes. // If your theme does not support coloring the calendar boxes, // this will highlight the day numbers. \"highlight_special_interest_days\" : true , holiday_scope \ue157 Highlight holidays with the same color as the given scope. // Highlight holidays with the same color as the given scope. \"holiday_scope\" : \"constant.numeric\" , selected_scope \ue157 Highlight selected day (current day etc.) with the same color as the given scope. // Highlight selected day (current day etc.) with the same color as the given scope. \"selected_scope\" : \"keyword.operator\" , offline_holidays \ue157 If you are behind a firewall or simply prefer the selection provided by the internal holiday generator, you can enable offline_holidays . With offline_holidays , holidays will be generated via an internal library. Currently, the internal generator contains lists that are mainly for the US, as the author is from the US. Holiday lists for other countries and cultures are welcome via pull requests! The internal generator was provided thanks to kauinoa . // Don't download from http://holidata.net, but instead use internal holiday generator. // Note: currently only US and a few world wide holidays are supported. \"offline_holidays\" : false , default_holiday_lists \ue157 The internal, offline holiday generator has a number of holiday lists available. each item in the dictionary can be individually enabled or disabled. Enable a list will enable all the holidays specified in that list. // Default internal holiday lists \"default_holiday_lists\" : { \"christian\" : false , // Christian (a lot are specifically Catholic) \"daylight_savings\" : true , // Daylight Savings \"common_us\" : false , // Common US holidays \"federal_us\" : true , // US federal holidays \"important_us\" : true , // Important US holidays \"state_birthdays_us\" : false , // State birthdays US holidays \"other_us\" : false , // Other random holidays \"world_wide\" : false // World wide holidays }, custom_holidays \ue157 QuickCal allows for additional custom holidays. You can add as many as you want. Only very basic holidays can be defined at this time. Holidays are defined by creating a dictionary object in the custom_holidays list. Holidays are defined in the dictionary by giving the month and the day in an array via the date key, and a unique name via the name key. Custom holidays cannot handle complex holidays: 3 rd Tuesday of the month etc. It is possible that more advanced holiday support might be provided in the future. // Add simple custom holidays. Should be an array of dictionaries. \"custom_holidays\" : [ // Should be in the following form: // name: is a unique name for the holiday // date: is an array of two integers: [month, day] // {\"name\": \"Bob's Birthday\", \"date\": [2, 20]} ] } Highlighting Current Days and Holidays \ue157 By default, most color schemes won't highlight the current day and holidays. For this reason, the highlight_special_interest_days settings was added to ensure special interest days still get highlighted. If you would like to take control of the active day and holiday highlighting and have your color scheme natively highlight these days, you can edit your color scheme. Active day calendar boxes are scoped as selected_day.calendar while holiday calendar boxes are scoped as holiday.calendar . You must update your color scheme file with something like the following to have your color scheme highlight special interest days (don't forget to disable highlight_special_interest_days ): <dict> <key> name </key> <string> Calendar Selected Day </string> <key> scope </key> <string> selected_day.calendar </string> <key> settings </key> <dict> <key> background </key> <string> #F2777A </string> <key> foreground </key> <string> #2D2D2D </string> </dict> </dict> <dict> <key> name </key> <string> Calendar Holiday </string> <key> scope </key> <string> holiday.calendar </string> <key> settings </key> <dict> <key> background </key> <string> #66CCCC </string> <key> foreground </key> <string> #2D2D2D </string> </dict> </dict>","title":"User Guide"},{"location":"#user-guide","text":"","title":"User Guide"},{"location":"#general-use","text":"QuickCal can be run from the command palette to show the current month, or navigate through future or past months. QuickCal can be even be configured to show holidays. If you have Sublime Text build 3080+, QuickCal can also show holiday tooltips that outline all of the holidays for the selected day (in version of Sublime 3124+, tooltip appears on hover instead).","title":"General Use"},{"location":"#commands","text":"Calendar can be opened via commands from the command palette. Once a calendar is shown, you can use the left and right arrow to navigate the months of the year.","title":"Commands"},{"location":"#calendarcommand","text":"Shows today's date in the calendar (month view only)","title":"CalendarCommand"},{"location":"#calendarlookupcommand","text":"Shows an input panel allowing the user to define what day they would like to see in the calendar. Input is entered as month/day/year , where month, day, and year are numerical values. Any non number delimiter can be used, so things like 3-2-2013 is also acceptable.","title":"CalendarLookupCommand"},{"location":"#calendarmonthnavcommand","text":"CalendarMonthNavCommand is a command that can only be run in a calendar view. It allows you to navigate to the next or previous month. It takes a directional option called reverse . If reverse is set to true , the command will navigate to the previous month.","title":"CalendarMonthNavCommand"},{"location":"#settings","text":"These are the available settings at the current time:","title":"Settings"},{"location":"#locale","text":"When in online mode, holidays are downloaded from holidata.net. Holidata.net provides holidays for a number of different locales. You can see which are available by checking here . Simply enter your locale in the locale setting to retrieve the appropriate locale. Holidays from holidata.net are limited to about one year in advance of the current and go back as far as 2011. { // Locale for holidays, this is what will get pulled down from holidata.net // Please check http://holidata.net/locale_index.html to see available locale \"locale\" : \"en-US\" ,","title":"locale"},{"location":"#region","text":"Some locales will have sub regions that have different holidays. For instance, the United States has many states, and some states have holidays that are specific to a state. To view what regions are available for your locale, you can look in one of the JSON files located here . If you do not want region specific holidays, you can leave this blank. // Sub region of locale. For example, in the US, a sub region would be a state // such as Florida (FL). If you have doubts about what to use, you can look in // one of the JSON files at http://holidata.net/locale_index.html to see what // regions are referenced in you locale file. \"region\" : \"\" ,","title":"region"},{"location":"#sunday_first","text":"If you would like to view your calendar starting with Sunday as the first day, you can enable sunday_first . Simply disable it to have Monday as the first day. // Start with Sunday first when displaying calendar \"sunday_first\" : true ,","title":"sunday_first"},{"location":"#hide_holiday_footer","text":"Hides the holiday list that appears under the calendar. // Hide the holiday list under the calendar. \"hide_holiday_footer\" : false ,","title":"hide_holiday_footer"},{"location":"#highlight_special_interest_days","text":"Creates highlight regions around holidays and special interest days (like current day). This is useful if your color scheme does not natively highlight the calendar scopes. // If your theme does not support coloring the calendar boxes, // this will highlight the day numbers. \"highlight_special_interest_days\" : true ,","title":"highlight_special_interest_days"},{"location":"#holiday_scope","text":"Highlight holidays with the same color as the given scope. // Highlight holidays with the same color as the given scope. \"holiday_scope\" : \"constant.numeric\" ,","title":"holiday_scope"},{"location":"#selected_scope","text":"Highlight selected day (current day etc.) with the same color as the given scope. // Highlight selected day (current day etc.) with the same color as the given scope. \"selected_scope\" : \"keyword.operator\" ,","title":"selected_scope"},{"location":"#offline_holidays","text":"If you are behind a firewall or simply prefer the selection provided by the internal holiday generator, you can enable offline_holidays . With offline_holidays , holidays will be generated via an internal library. Currently, the internal generator contains lists that are mainly for the US, as the author is from the US. Holiday lists for other countries and cultures are welcome via pull requests! The internal generator was provided thanks to kauinoa . // Don't download from http://holidata.net, but instead use internal holiday generator. // Note: currently only US and a few world wide holidays are supported. \"offline_holidays\" : false ,","title":"offline_holidays"},{"location":"#default_holiday_lists","text":"The internal, offline holiday generator has a number of holiday lists available. each item in the dictionary can be individually enabled or disabled. Enable a list will enable all the holidays specified in that list. // Default internal holiday lists \"default_holiday_lists\" : { \"christian\" : false , // Christian (a lot are specifically Catholic) \"daylight_savings\" : true , // Daylight Savings \"common_us\" : false , // Common US holidays \"federal_us\" : true , // US federal holidays \"important_us\" : true , // Important US holidays \"state_birthdays_us\" : false , // State birthdays US holidays \"other_us\" : false , // Other random holidays \"world_wide\" : false // World wide holidays },","title":"default_holiday_lists"},{"location":"#custom_holidays","text":"QuickCal allows for additional custom holidays. You can add as many as you want. Only very basic holidays can be defined at this time. Holidays are defined by creating a dictionary object in the custom_holidays list. Holidays are defined in the dictionary by giving the month and the day in an array via the date key, and a unique name via the name key. Custom holidays cannot handle complex holidays: 3 rd Tuesday of the month etc. It is possible that more advanced holiday support might be provided in the future. // Add simple custom holidays. Should be an array of dictionaries. \"custom_holidays\" : [ // Should be in the following form: // name: is a unique name for the holiday // date: is an array of two integers: [month, day] // {\"name\": \"Bob's Birthday\", \"date\": [2, 20]} ] }","title":"custom_holidays"},{"location":"#highlighting-current-days-and-holidays","text":"By default, most color schemes won't highlight the current day and holidays. For this reason, the highlight_special_interest_days settings was added to ensure special interest days still get highlighted. If you would like to take control of the active day and holiday highlighting and have your color scheme natively highlight these days, you can edit your color scheme. Active day calendar boxes are scoped as selected_day.calendar while holiday calendar boxes are scoped as holiday.calendar . You must update your color scheme file with something like the following to have your color scheme highlight special interest days (don't forget to disable highlight_special_interest_days ): <dict> <key> name </key> <string> Calendar Selected Day </string> <key> scope </key> <string> selected_day.calendar </string> <key> settings </key> <dict> <key> background </key> <string> #F2777A </string> <key> foreground </key> <string> #2D2D2D </string> </dict> </dict> <dict> <key> name </key> <string> Calendar Holiday </string> <key> scope </key> <string> holiday.calendar </string> <key> settings </key> <dict> <key> background </key> <string> #66CCCC </string> <key> foreground </key> <string> #2D2D2D </string> </dict> </dict>","title":"Highlighting Current Days and Holidays"},{"location":"contributing/","text":"Contributing & Support \ue157 Overview \ue157 Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports \ue157 Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ApplySyntax->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code \ue157 Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests \ue157 Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests \ue157 Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements \ue157 A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ApplySyntax->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"contributing/#running-validation-tests","text":"Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"installation/","text":"Installation \ue157 Package Control \ue157 The recommended way to install QuickCal is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing QuickCal ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation \ue157 Warning This is not the recommended way to install QuickCal for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone QuickCal and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install QuickCal without package control, here are the steps. It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe \u2192 markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 \u2192 python-jinja2 packagecontrol/pygments \u2192 pygments facelessuser/sublime-markdown-popups \u2192 mdpopups facelessuser/sublime-markdown \u2192 python-markdown Download and unpack, or git clone, the latest QuickCal release and unpack as QuickCal : facelessuser/QuickCal \u2192 QuickCal Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning \ue157 Quit Sublime Text. Open a terminal and enter the following. For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/QuickCal.git QuickCal Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install QuickCal is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing QuickCal ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install QuickCal for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone QuickCal and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install QuickCal without package control, here are the steps. It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe \u2192 markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 \u2192 python-jinja2 packagecontrol/pygments \u2192 pygments facelessuser/sublime-markdown-popups \u2192 mdpopups facelessuser/sublime-markdown \u2192 python-markdown Download and unpack, or git clone, the latest QuickCal release and unpack as QuickCal : facelessuser/QuickCal \u2192 QuickCal Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/QuickCal.git QuickCal Restart Sublime Text.","title":"Git Cloning"},{"location":"license/","text":"License \ue157 QuickCal is released under the MIT license. Copyright \u00a9 2012 - 2017 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"QuickCal is released under the MIT license. Copyright \u00a9 2012 - 2017 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"}]}